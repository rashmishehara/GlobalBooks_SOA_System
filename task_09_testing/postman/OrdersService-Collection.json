{
  "info": {
    "name": "GlobalBooks OrdersService API",
    "description": "Complete test collection for OrdersService REST API",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8081/api/v1",
      "type": "string"
    },
    {
      "key": "order_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/orders/health",
          "host": ["{{base_url}}"],
          "path": ["orders", "health"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response time is less than 500ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(500);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create Order - Valid",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"customerId\": \"cust_12345\",\n  \"items\": [\n    {\n      \"bookId\": \"978-0134685991\",\n      \"bookTitle\": \"Effective Java\",\n      \"quantity\": 2,\n      \"unitPrice\": 45.99\n    },\n    {\n      \"bookId\": \"978-0596007126\",\n      \"bookTitle\": \"Head First Design Patterns\",\n      \"quantity\": 1,\n      \"unitPrice\": 39.99\n    }\n  ],\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"USA\"\n  },\n  \"paymentMethod\": {\n    \"type\": \"CREDIT_CARD\",\n    \"cardNumber\": \"4111111111111111\",\n    \"expiryMonth\": 12,\n    \"expiryYear\": 2026,\n    \"cvv\": \"123\",\n    \"holderName\": \"John Doe\"\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/orders",
          "host": ["{{base_url}}"],
          "path": ["orders"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response has orderId', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('orderId');",
              "    pm.environment.set('order_id', jsonData.orderId);",
              "});",
              "",
              "pm.test('Total amount is calculated correctly', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.totalAmount).to.equal(131.97);",
              "});",
              "",
              "pm.test('Order status is PENDING', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.status).to.equal('PENDING');",
              "});",
              "",
              "pm.test('Response contains all items', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.items).to.have.lengthOf(2);",
              "});",
              "",
              "pm.test('Response time is less than 2000ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create Order - Invalid Data",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"customerId\": \"\",\n  \"items\": [\n    {\n      \"bookId\": \"invalid-isbn\",\n      \"quantity\": 0,\n      \"unitPrice\": -10.00\n    }\n  ]\n}"
        },
        "url": {
          "raw": "{{base_url}}/orders",
          "host": ["{{base_url}}"],
          "path": ["orders"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Error response contains validation details', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "    pm.expect(jsonData.error).to.equal('VALIDATION_ERROR');",
              "});",
              "",
              "pm.test('Response contains error details', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('details');",
              "    pm.expect(jsonData.details).to.be.an('array');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Order by ID",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/orders/{{order_id}}",
          "host": ["{{base_url}}"],
          "path": ["orders", "{{order_id}}"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains order details', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('orderId');",
              "    pm.expect(jsonData).to.have.property('customerId');",
              "    pm.expect(jsonData).to.have.property('items');",
              "    pm.expect(jsonData).to.have.property('totalAmount');",
              "    pm.expect(jsonData).to.have.property('status');",
              "});",
              "",
              "pm.test('Order ID matches requested ID', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.orderId).to.equal(pm.environment.get('order_id'));",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Order by ID - Not Found",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/orders/ord_nonexistent",
          "host": ["{{base_url}}"],
          "path": ["orders", "ord_nonexistent"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 404', function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test('Error response indicates not found', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error).to.equal('ORDER_NOT_FOUND');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "List Orders - All",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/orders",
          "host": ["{{base_url}}"],
          "path": ["orders"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains orders array', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('orders');",
              "    pm.expect(jsonData.orders).to.be.an('array');",
              "});",
              "",
              "pm.test('Response contains pagination info', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('totalCount');",
              "    pm.expect(jsonData).to.have.property('page');",
              "    pm.expect(jsonData).to.have.property('pageSize');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "List Orders - By Customer",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/orders?customerId=cust_12345",
          "host": ["{{base_url}}"],
          "path": ["orders"],
          "query": [
            {
              "key": "customerId",
              "value": "cust_12345"
            }
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('All orders belong to specified customer', function () {",
              "    var jsonData = pm.response.json();",
              "    jsonData.orders.forEach(function(order) {",
              "        pm.expect(order.customerId).to.equal('cust_12345');",
              "    });",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Update Order Status",
      "request": {
        "method": "PUT",
        "header": [],
        "url": {
          "raw": "{{base_url}}/orders/{{order_id}}/status?status=CONFIRMED",
          "host": ["{{base_url}}"],
          "path": ["orders", "{{order_id}}", "status"],
          "query": [
            {
              "key": "status",
              "value": "CONFIRMED"
            }
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Order status updated correctly', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.status).to.equal('CONFIRMED');",
              "});",
              "",
              "pm.test('Updated timestamp is present', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('updatedAt');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Update Order Status - Invalid Status",
      "request": {
        "method": "PUT",
        "header": [],
        "url": {
          "raw": "{{base_url}}/orders/{{order_id}}/status?status=INVALID_STATUS",
          "host": ["{{base_url}}"],
          "path": ["orders", "{{order_id}}", "status"],
          "query": [
            {
              "key": "status",
              "value": "INVALID_STATUS"
            }
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Error indicates invalid status', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error).to.contain('INVALID');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Cancel Order",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{base_url}}/orders/{{order_id}}",
          "host": ["{{base_url}}"],
          "path": ["orders", "{{order_id}}"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 204', function () {",
              "    pm.response.to.have.status(204);",
              "});",
              "",
              "pm.test('Response body is empty', function () {",
              "    pm.expect(pm.response.text()).to.be.empty;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Unauthorized Access Test",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/orders",
          "host": ["{{base_url}}"],
          "path": ["orders"]
        },
        "auth": {
          "type": "noauth"
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 401', function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test('Error indicates unauthorized access', function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error).to.equal('UNAUTHORIZED');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Running test for:', pm.info.requestName);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Content-Type header is present', function () {",
          "    if (pm.response.code !== 204) {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    }",
          "});"
        ]
      }
    }
  ]
}